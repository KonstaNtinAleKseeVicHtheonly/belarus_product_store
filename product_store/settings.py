"""
Django settings for product_store project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv

#подгрузка конфиг файлов из dotevn
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent # путь к корню нашего проекта


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--t1zo65&bloi-04gq*@^eec&!5c67dib=2@=_ev&62zet_)wlz'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG')

BASE_DIR = Path(__file__).resolve().parent.parent
# STATIC_ROOT=os.path.join(BASE_DIR, 'staticfiles')

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.contenttypes',
    'django.contrib.auth',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django_bootstrap5', #для пагинации
    'django.contrib.staticfiles',  # для отображения статическх файлов django
    'django.contrib.humanize',# для красивых циферок
    'django.contrib.postgres', # для продвинутого поиска по товарамы
    'django_extensions', # для shell plus
    'debug_toolbar',
    'mptt',
    'widget_tweaks', # специфичные фильтры для шаблонов при отображении форм
 
    'products',
    'store_users',
    'carts',
    'orders',
    'additional_info',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'debug_toolbar.middleware.DebugToolbarMiddleware', # для debug tool bar
]

ROOT_URLCONF = 'product_store.urls'

# указывает папку в которой будут храниться медиафайлы
MEDIA_ROOT = BASE_DIR / 'media' 
MEDIA_URL = 'media/'  # указывает путь до папки с медиафайлами


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'product_store.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
# # бд для работы с sqlite
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# Для работы с postgre
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv("DATABASE_NAME"), # пришлось отдельно сделать через python-dotenv ибо не работало
        'USER': os.getenv('DATABASE_USER'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD'),
        'HOST': os.getenv('DATABASE_HOST'),
        'PORT': os.getenv('DATABASE_PORT'),
    }
}
# кэшиерование через django cash framework
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
        "LOCATION": BASE_DIR / "cache",
    }
}   

# #Redis

# REDIS_HOST = os.getenv('REDIS_HOST')
# REDIS_PORT = os.getenv('REDIS_PORT')

# # настройка кэширования для реддиса
# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}/1",
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#         }
#     }
# }
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATIC_URL='/static/' # что бы при запуске сайта с компа, программа знала где искать статические файлы
STATICFILES_DIRS = [
   os.path.join(BASE_DIR /'static')
   ] # доп пути по которым будет искать статику в проекте
# STATIC_ROOT = '' # добавить при деплое сервера, пока не нужно
INTERNAL_IPS = ['127.0.0.1'] # что бы debug tool bar работа только по этому адресу


AUTH_USER_MODEL = 'store_users.StoreUser'# модель, котору используем вместо auth в нашем проекте 
LOGIN_URL = '/store_users/login/' # что бы неавторизованный юзер при попытке зайти в профиль (где рпименен декоратор login_required)перенаправлялся на страницу авторизации
LOGIN_REDIRECT_URL = '/' # редирект при входе в аккаунт на main_page сайта